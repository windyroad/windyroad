<?xml version="1.0" encoding="UTF-8"?>
<project name="ivy-util"
         xmlns="antlib:org.apache.tools.ant"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:wrivy="org.windyroad.ivy-util"
         xmlns:tibant="org.windyroad.tibant">

	<import file="properties.xml" />

	<target name="-override-ivy-properties">
	</target>

	<!-- to allow developers to change the Ivy version and location of the various files, we store theses values
    in properties, which are used in the other targets -->
	<target name="-init-ivy-properties" depends="-override-ivy-properties">
		<property name="ivy.install.version" value="2.3.0" />
		<property name="ivy.jar.dir" location="${user.home}/.ivy2/jars" />
		<property name="ivy.jar.file" location="${ivy.jar.dir}/ivy-${ivy.install.version}.jar" />
		<property name="ivy.settings.file" value="${bwda.importer.dir}/ivysettings.xml" />
		<property name="ivy.dep.file" value="${bwda.importer.dir}/ivy.xml" />
	</target>

	<!-- we do not assume the developer has Ivy installed, so we use this target to download Ivy from the
    Windy Road repository, which proxies the Maven Central Repository. Ideally this should be changed to an Enterprise
    Repository (also know as a Definitive Media Library), to ensure the revisions of software we use are always
    available -->
	<target name="-download-ivy" unless="ivy.downloaded" depends="-init-ivy-properties">
		<mkdir dir="${ivy.jar.dir}" />
		<echo message="installing ivy..." />
		<tibant:PersitedInput property="wr.repo.username"
		                      message="What is your username for the Windy Road Download Server?"
		                      file="${user.home}/build.properties" />
		<tibant:PersitedInput property="wr.repo.password"
		                      message="What is your password for the Windy Road Download Server?"
		                      file="${user.home}/build.properties" />
		<get src="http://windyroad.artifactoryonline.com/windyroad/mavenCentral-cache/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
		     dest="${ivy.jar.file}"
		     usetimestamp="true"
		     verbose="true"
		     username="${wr.repo.username}"
		     password="${wr.repo.password}" />
	</target>

	<!-- we don't want to download Ivy every time, so this target is used to see if it has already been downloaded -->
	<target name="-check-ivy-downloaded" depends="-init-ivy-properties">
		<condition property="ivy.downloaded">
			<available file="${ivy.jar.file}" />
		</condition>
	</target>

	<!-- In order to make Ivy available for use, it needs to be loaded and configured -->
	<target name="-load-ivy" depends="-check-ivy-downloaded,-download-ivy" unless="ivy.loaded">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="ivy-${ivy.install.version}.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
		<property name="ivy.loaded" value="true" />
	</target>

	<target name="-configure-ivy" depends="-load-ivy">
		<property name="bwda.ivy.settings.id" value="ivy.instance" />
		<ivy:configure settingsid="${bwda.ivy.settings.id}" />
	</target>

	<!-- So that developers don't have manually download their dependencies, we use Ivy to retrieve them.
    The dependencies are specified in ${ivy.dep.file} -->
	<target name="-retrieve" description="retrieve dependancies with ivy" depends="-configure-ivy">
		<wrivy:retrieve />
	</target>

	<macrodef name="retrieve" uri="org.windyroad.ivy-util">
		<attribute name="conf" default="default" />
		<sequential>
			<ivy:resolve conf="@{conf}" settingsRef="${bwda.ivy.settings.id}" />
			<ivy:retrieve settingsRef="${bwda.ivy.settings.id}" />
			<!-- in order to make the locations of the dependencies and their revisions available to other targets 
        we set properties using the following tasks -->
			<ivy:artifactproperty name="bwda.dep.[module].[artifact].[ext]"
			                      value="${bwda.lib.dir.location}/[artifact]-[revision].[ext]"
			                      settingsRef="${bwda.ivy.settings.id}" />
			<ivy:artifactproperty name="bwda.dep.[module].[artifact]"
			                      value="${bwda.lib.dir.location}/[artifact]-[revision]"
			                      settingsRef="${bwda.ivy.settings.id}" />
			<ivy:artifactproperty name="bwda.dep.[module].revision"
			                      value="[revision]"
			                      settingsRef="${bwda.ivy.settings.id}" />
			<mkdir dir="${bwda.build.dir}" />
			<ivy:artifactproperty name="bwda.new.dep.[module].[artifact].[ext]"
			                      value="${bwda.lib.dir.location}/[artifact]-[revision].[ext]"
			                      settingsRef="${bwda.ivy.settings.id}" />
			<ivy:artifactproperty name="bwda.new.dep.[module].revision"
			                      value="[revision]"
			                      settingsRef="${bwda.ivy.settings.id}" />
			<mkdir dir="${bwda.build.dir}" />
			<echoproperties destfile="${bwda.build.dir}/dependencies.properties">
				<propertyset>
					<mapper type="glob" from="bwda.new.dep.*" to="bwda.dep.*" />
					<propertyref prefix="bwda.new.dep" />
				</propertyset>
			</echoproperties>
		</sequential>
	</macrodef>

	<target name="-get-module-org">
		<!-- get the organisation for this module -->
		<tibant:PersitedInput property="ivy.organisation"
		                      message="What organisation or organisational unit does this project belong to (using reverse internet domain format)? e.g., com.company.department"
		                      defaultValue="com.example.integration" />
	</target>


	<target name="-determine-current-version" depends="-retrieve">

		<echo level="info">Getting Current and Next Release Version...</echo>
		<tibant:PersitedInput property="bwda.default.version"
		                      message="What is the next version number for this project?"
		                      defaultvalue="1" />

		<ivy:buildnumber organisation="${ivy.organisation}"
		                 module="${ivy.module}"
		                 default="${bwda.default.version}"
		                 resolver="releases"
		                 prefix="bwda.releases"
		                 settingsRef="${bwda.ivy.settings.id}" />
		<!-- default to "none" if there is no current release version -->
		<property name="bwda.releases.revision" value="none" />
		<echo level="info">Current Release Version: ${bwda.releases.revision}</echo>
		<echo level="info">Next Release Version: ${bwda.releases.new.revision}</echo>
	</target>

	<target name="-determine-snapshot-version" depends="-determine-current-version">

		<echo level="info">Getting Current and Next Snapshot Version...</echo>
		<ivy:buildnumber organisation="${ivy.organisation}"
		                 module="${ivy.module}"
		                 revision="${bwda.releases.new.revision}"
		                 resolver="snapshots"
		                 prefix="bwda.snapshots"
		                 settingsRef="${bwda.ivy.settings.id}" />
		<!-- default to "none" if there is no current snapshot version -->
		<property name="bwda.snapshots.revision" value="none" />
		<echo level="info">Current Snapshot Version: ${bwda.snapshots.revision}</echo>
		<echo level="info">Next Snapshot Version: ${bwda.snapshots.new.revision}</echo>
	</target>

	<target name="build">
		<fail message="This target should be overridden in the provideded targets.xml" />
	</target>

	<target name="publish"
	        depends="-determine-snapshot-version,build"
	        description="Publish the built EAR files and PROJLIB files to an artifact repository">
		<echo level="info"
		      message="publishing ${ant.project.name} to 'snapshots' with version '${bwda.snapshots.new.revision}'..." />
		<ivy:publish artifactspattern="${bwda.build.dir}/[artifact].[ext]"
		             resolver="snapshots"
		             pubrevision="${bwda.snapshots.new.revision}"
		             overwrite="false"
		             forcedeliver="true"
		             update="false"
		             replacedynamicrev="false"
		             conf="default,dist"
		             settingsRef="${bwda.ivy.settings.id}"
		             haltonmissing="true">
		</ivy:publish>

		<echo level="info" message="...published" />
		<echoproperties destfile="${bwda.build.dir}/pubrevision.properties">
			<propertyset>
				<propertyref name="bwda.pipeline.version" />
			</propertyset>
		</echoproperties>
	</target>

	<target name="-get-deployment-domain">
		<input addproperty="bwda.deployment.domain" message="Which TIBCO Administrator Domain are we deploying to?" />
	</target>

	<target name="-create-ivy-file-for-config">
		<fail message="This target should be overridden in the provideded targets.xml" />
	</target>

	<target name="-create-settings-file">
		<fail message="This target should be overridden in the provideded targets.xml" />
	</target>

	<target name="-configure-ivy-for-ear-config"
	        description="retrieve cofiguration dependancies with ivy"
	        depends="-load-ivy,-get-deployment-domain,-create-ivy-file-for-config">
		<ivy:configure settingsid="bwda.config" file="${ivy.settings.file}" />
	</target>

	<target name="-retrieve-deployable"
	        description="retrieve cofiguration dependancies with ivy"
	        depends="-configure-ivy-for-ear-config">
		<ivy:resolve settingsRef="bwda.config" file="${bwda.build.dir}/ivy-ear-config.xml" />
		<ivy:retrieve settingsRef="bwda.config"
		              pattern="${bwda.build.dir}/deployable/[artifact].[ext]"
		              setid="bwda.deployable.set" />
	</target>


	<target name="-determine-config-version" depends="-get-deployment-domain,-retrieve-deployable">

		<echo level="info">Getting Current and Next Config Version for ${ivy.organisation}.${ant.project.name}-${bwda.pipeline.version}....</echo>
		<ivy:buildnumber organisation="${ivy.organisation}"
		                 module="${ant.project.name}-${bwda.deployment.domain}"
		                 revision="${bwda.pipeline.version}"
		                 resolver="releases"
		                 prefix="bwda.config"
		                 settingsRef="bwda.config" />
		<!-- default to "none" if there is no current snapshot version -->
		<property name="bwda.config.revision" value="none" />
		<echo level="info">Current ${bwda.deployment.domain} Config Version: ${bwda.config.revision}</echo>
		<echo level="info">Next ${bwda.deployment.domain} Config Version: ${bwda.config.new.revision}</echo>
	</target>

	<target name="configure-ear">
		<fail message="This target should be overridden in the provideded targets.xml" />
	</target>


	<target name="publish-config"
	        depends="-determine-config-version,configure-ear"
	        description="Publish the built EAR configuration files">
		<echo level="info"
		      message="publishing ${ant.project.name} configuration to 'releases' with version '${bwda.config.new.revision}'..." />
		<ivy:publish artifactspattern="${bwda.build.dir}/deployable/[artifact].[ext]"
		             resolver="releases"
		             pubrevision="${bwda.config.new.revision}"
		             status="release"
		             overwrite="false"
		             forcedeliver="true"
		             update="false"
		             replacedynamicrev="false"
		             conf="default"
		             settingsRef="bwda.config"
		             haltonmissing="true">
		</ivy:publish>
		<echo level="info" message="...published" />
		<echoproperties destfile="${bwda.build.dir}/pubrevision.properties">
			<propertyset>
				<propertyref name="bwda.pipeline.version" />
				<propertyref name="bwda.config.new.revision" />
				<mapper type="glob"
				        from="bwda.config.new.revision"
				        to="bwda.pipeline.${bwda.deployment.domain}.config.version" />
			</propertyset>
		</echoproperties>
	</target>

	<target name="-determine-current-config-version"
	        depends="-retrieve-deployable,-get-deployment-domain,-configure-ivy-for-ear-config">

		<echo level="info">Getting Current and Next Config Version...</echo>
		<ivy:buildnumber organisation="${ivy.organisation}"
		                 module="${ant.project.name}-${bwda.deployment.domain}"
		                 revision="${bwda.pipeline.version}"
		                 resolver="releases"
		                 prefix="bwda.config"
		                 settingsRef="bwda.config" />
		<!-- default to "none" if there is no current snapshot version -->
		<property name="bwda.config.revision" value="none" />
		<echo level="info">Current ${bwda.deployment.domain} Config Version: ${bwda.config.revision}</echo>
		<echo level="info">Next ${bwda.deployment.domain} Config Version: ${bwda.config.new.revision}</echo>
	</target>


	<target name="-retrieve-config" depends="-determine-current-config-version">
		<for param="domain">
			<propertyset>
				<propertyref name="bwda.deployment.domain" />
			</propertyset>
			<sequential>
				<input addproperty="bwda.pipeline.@{domain}.config.version"
				       message="What version of '${ivy.organisation}.${ant.project.name}-@{domain}' configuration are we deploying?"
				       defaultvalue="${bwda.config.revision}" />
				<mkdir dir="${bwda.build.dir}/deployable" />
				<ivy:retrieve organisation="${ivy.organisation}"
				              module="${ant.project.name}-@{domain}"
				              revision="${bwda.pipeline.@{domain}.config.version}"
				              inline="true"
				              transitive="true"
				              pattern="${bwda.build.dir}/deployable/[artifact].[ext]"
				              settingsRef="bwda.config"
				              setId="bwda.config.set" />
			</sequential>
		</for>
	</target>

	<target name="-get-version-to-promote" depends="" description="">
		<input addproperty="bwda.pipeline.version"
		       message="What snapshot version of '${ivy.organisation}.${ivy.module}' would you like to promote to a release?"
		       defaultvalue="${bwda.snapshots.revision}" />
	</target>

	<target name="promote"
	        depends="-get-version-to-promote,-retrieve-deployable"
	        description="Promotes a snapshot to a release">
		<echo level="info"
		      message="promoting '${ivy.organisation}.${ivy.module}-XXX' to 'releases' with version '${bwda.releases.new.revision}'..." />
		<ivy:publish artifactspattern="${bwda.build.dir}/[artifact].[ext]"
		             resolver="snapshots"
		             pubrevision="${bwda.snapshots.new.revision}"
		             overwrite="false"
		             forcedeliver="true"
		             update="false"
		             replacedynamicrev="false"
		             conf="default,dist"
		             settingsRef="${bwda.ivy.settings.id}"
		             haltonmissing="true">
		</ivy:publish>

		<echo level="info" message="...promoted" />
		<echoproperties destfile="${bwda.build.dir}/pubrevision.properties">
			<propertyset>
				<propertyref name="bwda.pipeline.version" />
			</propertyset>
		</echoproperties>
	</target>


</project>
